{"version":3,"file":"react-cssfx-loading.cjs.production.min.js","sources":["../src/BarWave.tsx","../src/BouncingBalls.tsx","../src/CircularProgress.tsx","../src/Coin.tsx","../src/FadingBalls.tsx","../src/FadingDots.tsx","../src/FillingBottle.tsx","../src/FlippingSquare.tsx","../src/Hypnosis.tsx","../src/Messaging.tsx","../src/Ring.tsx","../src/Spin.tsx","../src/SpinStretch.tsx","../src/TwinSpin.tsx"],"sourcesContent":["import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst grow = keyframes`\n  0%, 100% {\n    transform: scaleY(1);\n  }\n\n  50% {\n    transform: scaleY(2);\n  }\n`;\n\nexport interface BarWaveProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst BarWave: React.FC<BarWaveProps & React.HTMLProps<HTMLDivElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"2rem\",\n  height = \"1rem\",\n  style = {},\n  duration = \"1s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <div\n      {...others}\n      style={style}\n      className={\n        css`\n          display: flex;\n          flex-flow: row nowrap;\n          align-items: center;\n          justify-content: space-between;\n          width: ${resolvedWidth};\n\n          & span {\n            width: calc(${resolvedWidth} / 4 * 3 / 4);\n            height: ${resolvedHeight};\n            background-color: ${color};\n          }\n\n          & span:nth-of-type(1) {\n            animation: ${grow} ${duration} -0.45s ease-in-out infinite;\n          }\n\n          & span:nth-of-type(2) {\n            animation: ${grow} ${duration} -0.3s ease-in-out infinite;\n          }\n\n          & span:nth-of-type(3) {\n            animation: ${grow} ${duration} -0.15s ease-in-out infinite;\n          }\n\n          & span:nth-of-type(4) {\n            animation: ${grow} ${duration} ease-in-out infinite;\n          }\n        ` + ` ${className}`\n      }\n    >\n      <span></span>\n      <span></span>\n      <span></span>\n      <span></span>\n    </div>\n  );\n};\n\nexport default BarWave;\n","import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst leftSwing = keyframes`\n  50%,\n  100% {\n    transform: translateX(0);\n  }\n`;\n\nconst rightSwing = keyframes`\n  50% {\n    transform: translateX(0);\n  }\n  100% {\n    transform: translateX(100%);\n  }\n`;\n\nexport interface BouncingBallsProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst BouncingBalls: React.FC<BouncingBallsProps & React.HTMLProps<HTMLDivElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"3rem\",\n  height = \"1rem\",\n  style = {},\n  duration = \"0.5s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <div\n      {...others}\n      style={style}\n      className={\n        css`\n          display: inline-flex;\n          flex-flow: row nowrap;\n          align-items: center;\n          justify-content: space-between;\n          width: ${resolvedWidth};\n\n          & div {\n            width: calc(${resolvedWidth} / 3);\n            height: ${resolvedHeight};\n            border-radius: 50%;\n            background-color: ${color};\n          }\n\n          & div:nth-of-type(1) {\n            transform: translateX(-100%);\n            animation: ${leftSwing} ${duration} ease-in alternate infinite;\n          }\n\n          & div:nth-of-type(3) {\n            transform: translateX(0);\n            animation: ${rightSwing} ${duration} ease-out alternate infinite;\n          }\n        ` + ` ${className}`\n      }\n    >\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default BouncingBalls;\n","import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst rotate = keyframes`\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst dash = keyframes`\n  0% {\n    stroke-dasharray: 1, 200;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 90, 200;\n    stroke-dashoffset: -35px;\n  }\n  100% {\n    stroke-dashoffset: -125px;\n  }\n`;\n\nexport interface CircularProgressProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst CircularProgress: React.FC<CircularProgressProps & React.SVGProps<SVGSVGElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"3rem\",\n  height = \"3rem\",\n  style = {},\n  duration = \"2s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <svg\n      {...others}\n      crossOrigin=\"anonymous\"\n      viewBox=\"25 25 50 50\"\n      style={style}\n      className={\n        css`\n          width: ${resolvedWidth};\n          height: ${resolvedHeight};\n          transform-origin: center;\n          animation: ${rotate} ${duration} linear infinite;\n        ` + ` ${className}`\n      }\n    >\n      <circle\n        className={css`\n          fill: none;\n          stroke: ${color};\n          stroke-width: 3;\n          stroke-dasharray: 1, 200;\n          stroke-dashoffset: 0;\n          stroke-linecap: round;\n          animation: ${dash} calc(${duration} * 3 / 4) ease-in-out infinite;\n        `}\n        cx=\"50\"\n        cy=\"50\"\n        r=\"20\"\n      ></circle>\n    </svg>\n  );\n};\n\nexport default CircularProgress;\n","import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst spin = keyframes`\n  to {\n    transform: rotateY(540deg);\n  }\n`;\n\nexport interface CoinProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst Coin: React.FC<CoinProps & React.HTMLProps<HTMLDivElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"2rem\",\n  height = \"2rem\",\n  style = {},\n  duration = \"1.2s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <div\n      {...others}\n      style={style}\n      className={\n        css`\n          perspective: 9999px;\n        ` + ` ${className}`\n      }\n    >\n      <div\n        className={css`\n          width: ${resolvedWidth};\n          height: ${resolvedHeight};\n          border-radius: 50%;\n          border: calc(${resolvedWidth} / 8) solid ${color};\n          animation: ${spin} ${duration} ease-in-out infinite;\n        `}\n      ></div>\n    </div>\n  );\n};\n\nexport default Coin;\n","import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst fade = keyframes`\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n`;\n\nexport interface FadingBallsProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst FadingBalls: React.FC<FadingBallsProps & React.HTMLProps<HTMLDivElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"4rem\",\n  height = \"1rem\",\n  style = {},\n  duration = \"0.8s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <div\n      {...others}\n      style={style}\n      className={\n        css`\n          width: ${resolvedWidth};\n          display: flex;\n          flex-flow: row nowrap;\n          align-items: center;\n          justify-content: space-between;\n\n          & div {\n            width: calc(${resolvedWidth} / 4);\n            height: ${resolvedHeight};\n            border-radius: 50%;\n            background-color: ${color};\n            animation: ${fade} ${duration} ease-in-out alternate infinite;\n          }\n\n          & div:nth-of-type(1) {\n            animation-delay: calc(${duration} * -0.5);\n          }\n\n          & div:nth-of-type(2) {\n            animation-delay: calc(${duration} * -0.25);\n          }\n        ` + ` ${className}`\n      }\n    >\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default FadingBalls;\n","import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst fade = keyframes`\n  to {\n    opacity: 0.2;\n  }\n`;\n\nexport interface FadingDotsProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst FadingDots: React.FC<FadingDotsProps & React.HTMLProps<HTMLDivElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"2rem\",\n  height = \"2rem\",\n  style = {},\n  duration = \"0.6s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <div\n      {...others}\n      style={style}\n      className={\n        css`\n          width: ${resolvedWidth};\n          height: ${resolvedHeight};\n          display: grid;\n          grid-template-rows: repeat(3, 1fr);\n          grid-template-columns: repeat(3, 1fr);\n          justify-items: center;\n          align-items: center;\n\n          & > div {\n            width: calc(${resolvedWidth} / 6);\n            height: calc(${resolvedHeight} / 6);\n            background-color: ${color};\n            border-radius: 50%;\n            animation: ${fade} ${duration} alternate ease-in-out infinite;\n          }\n\n          & > div:nth-of-type(2),\n          & > div:nth-of-type(4) {\n            animation-delay: calc(${duration} / 6);\n          }\n\n          & > div:nth-of-type(3),\n          & > div:nth-of-type(5),\n          & > div:nth-of-type(7) {\n            animation-delay: calc(${duration} / 3);\n          }\n\n          & > div:nth-of-type(6),\n          & > div:nth-of-type(8) {\n            animation-delay: calc(${duration} / 2);\n          }\n\n          & > div:nth-of-type(9) {\n            animation-delay: calc(${duration} * 2 / 3);\n          }\n        ` + ` ${className}`\n      }\n    >\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default FadingDots;\n","import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst spin = keyframes`\n  50%,\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst fill = keyframes`\n  25%,\n  50% {\n    transform: scaleY(0);\n  }\n  100% {\n    transform: scaleY(1);\n  }\n`;\n\nexport interface FillingBottleProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst FillingBottle: React.FC<FillingBottleProps & React.HTMLProps<HTMLDivElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"2rem\",\n  height = \"2rem\",\n  style = {},\n  duration = \"1.4s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <div\n      {...others}\n      style={style}\n      className={\n        css`\n          position: relative;\n          width: ${resolvedWidth};\n          height: ${resolvedHeight};\n          border: 3px solid ${color};\n          overflow: hidden;\n          animation: ${spin} ${duration} ease infinite;\n\n          &::before {\n            content: \"\";\n            position: absolute;\n            top: -3px;\n            left: -3px;\n            width: calc(100% + 3px);\n            height: calc(100% + 3px);\n            background-color: ${color};\n            opacity: 0.75;\n            transform-origin: center bottom;\n            transform: scaleY(1);\n            animation: ${fill} ${duration} linear infinite;\n          }\n        ` + ` ${className}`\n      }\n    ></div>\n  );\n};\n\nexport default FillingBottle;\n","import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst flip = keyframes`\n  50% {\n    transform: rotateY(180deg);\n  }\n  100% {\n    transform: rotateY(180deg) rotateX(180deg);\n  }\n`;\n\nexport interface FlippingSquareProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst FlippingSquare: React.FC<FlippingSquareProps & React.HTMLProps<HTMLDivElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"2rem\",\n  height = \"2rem\",\n  style = {},\n  duration = \"1s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <div\n      {...others}\n      style={style}\n      className={\n        css`\n          perspective: 9999px;\n        ` + ` ${className}`\n      }\n    >\n      <div\n        className={css`\n          width: ${resolvedWidth};\n          height: ${resolvedHeight};\n          background-color: ${color};\n          transform: rotate(0);\n          animation: ${flip} ${duration} infinite;\n        `}\n      ></div>\n    </div>\n  );\n};\n\nexport default FlippingSquare;\n","import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst spin = keyframes`\n  to {\n    transform: translate(-50%, -50%) rotate(360deg);\n  }\n`;\n\nexport interface HypnosisProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst Hypnosis: React.FC<HypnosisProps & React.HTMLProps<HTMLDivElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"2rem\",\n  height = \"2rem\",\n  style = {},\n  duration = \"1.2s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <div\n      {...others}\n      style={style}\n      className={\n        css`\n          position: relative;\n          width: ${resolvedWidth};\n          height: ${resolvedHeight};\n\n          & div {\n            border: 3px solid transparent;\n            border-top-color: ${color};\n            border-right-color: ${color};\n            border-radius: 50%;\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%) rotate(0);\n          }\n        ` + ` ${className}`\n      }\n    >\n      <div\n        className={css`\n          width: ${resolvedWidth};\n          height: ${resolvedHeight};\n          animation: ${spin} ${duration} linear infinite;\n        `}\n      ></div>\n      <div\n        className={css`\n          width: calc(${resolvedWidth} * 0.6);\n          height: calc(${resolvedHeight} * 0.6);\n          animation: ${spin} calc(${duration} * 7 / 8) linear reverse infinite;\n        `}\n      ></div>\n      <div\n        className={css`\n          width: calc(${resolvedWidth} * 0.8 / 3.5);\n          height: calc(${resolvedHeight} * 0.8 / 3.5);\n          animation: ${spin} calc(${duration} * 3 / 4) linear infinite;\n        `}\n      ></div>\n    </div>\n  );\n};\n\nexport default Hypnosis;\n","import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst wave = keyframes`\n  from {\n    transform: translateY(-60%);\n  }\n  to {\n    transform: translateY(60%);\n  }\n`;\n\nexport interface MessagingProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst Messaging: React.FC<MessagingProps & React.HTMLProps<HTMLDivElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"1rem\",\n  height = \"1rem\",\n  style = {},\n  duration = \"0.4s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <div\n      {...others}\n      style={style}\n      className={\n        css`\n          display: flex;\n          flex-flow: row nowrap;\n          align-items: center;\n          gap: calc(${resolvedWidth} * 0.5);\n\n          & div {\n            width: ${resolvedWidth};\n            height: ${resolvedHeight};\n            border-radius: 50%;\n            background-color: ${color};\n            transform: translateY(-100%);\n            animation: ${wave} ${duration} ease-in-out alternate infinite;\n          }\n\n          & div:nth-of-type(1) {\n            animation-delay: calc(${duration} * -0.5);\n          }\n\n          & div:nth-of-type(2) {\n            animation-delay: calc(${duration} * -0.25);\n          }\n        ` + ` ${className}`\n      }\n    >\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default Messaging;\n","import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst spin = keyframes`\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nexport interface RingProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst Ring: React.FC<RingProps & React.SVGProps<SVGSVGElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"3rem\",\n  height = \"3rem\",\n  style = {},\n  duration = \"1s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <svg\n      {...others}\n      crossOrigin=\"anonymous\"\n      viewBox=\"0 0 50 50\"\n      style={style}\n      className={\n        css`\n          width: ${resolvedWidth};\n          height: ${resolvedHeight};\n          animation: ${spin} ${duration} ease infinite;\n        ` + ` ${className}`\n      }\n    >\n      <circle\n        className={css`\n          fill: none;\n          stroke: ${color};\n          opacity: 0.7;\n          stroke-width: 2;\n        `}\n        cx=\"25\"\n        cy=\"25\"\n        r=\"20\"\n      ></circle>\n      <circle\n        className={css`\n          fill: ${color};\n          stroke: none;\n        `}\n        cx=\"25\"\n        cy=\"5\"\n        r=\"3.5\"\n      ></circle>\n    </svg>\n  );\n};\n\nexport default Ring;\n","import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst spin = keyframes`\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nexport interface SpinProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst Spin: React.FC<SpinProps & React.HTMLProps<HTMLDivElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"2rem\",\n  height = \"2rem\",\n  style = {},\n  duration = \"1.2s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <div\n      {...others}\n      style={style}\n      className={\n        css`\n          border: 3px solid ${color}33;\n          border-top-color: ${color};\n          border-radius: 50%;\n          width: ${resolvedWidth};\n          height: ${resolvedHeight};\n          animation: ${spin} 1s linear infinite;\n        ` + ` ${className}`\n      }\n    ></div>\n  );\n};\n\nexport default Spin;\n","import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst spinStretch = keyframes`\n  50% {\n    transform: rotate(360deg) scale(0.4, 0.33);\n    border-width: 8px;\n  }\n  100% {\n    transform: rotate(720deg) scale(1, 1);\n    border-width: 3px;\n  }\n`;\n\nexport interface SpinStretchProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst SpinStretch: React.FC<SpinStretchProps & React.HTMLProps<HTMLDivElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"2rem\",\n  height = \"2rem\",\n  style = {},\n  duration = \"1.2s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <div\n      {...others}\n      style={style}\n      className={\n        css`\n          width: ${resolvedWidth};\n          height: ${resolvedHeight};\n          border: 3px solid transparent;\n          border-top-color: ${color};\n          border-bottom-color: ${color};\n          border-radius: 50%;\n          animation: ${spinStretch} ${duration} ease infinite;\n        ` + ` ${className}`\n      }\n    ></div>\n  );\n};\n\nexport default SpinStretch;\n","import { css, keyframes } from \"goober\";\n\nimport React from \"react\";\n\nconst spin = keyframes`\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst pulse = keyframes`\n  from {\n    transform: scale(0.5);\n  }\n  to {\n    transform: scale(1);\n  }\n`;\n\nexport interface TwinSpinProps {\n  className?: string;\n  color?: string;\n  width?: number | string;\n  height?: number | string;\n  style?: React.CSSProperties;\n  duration?: string;\n}\n\nconst TwinSpin: React.FC<TwinSpinProps & React.HTMLProps<HTMLDivElement>> = ({\n  className = \"\",\n  color = \"#0d6efd\",\n  width = \"2rem\",\n  height = \"2rem\",\n  style = {},\n  duration = \"0.6s\",\n  ...others\n}) => {\n  let resolvedWidth = typeof width === \"number\" ? `${width}px` : width;\n  let resolvedHeight = typeof height === \"number\" ? `${height}px` : height;\n\n  return (\n    <div\n      {...others}\n      style={style}\n      className={\n        css`\n          display: flex;\n          width: ${resolvedWidth};\n          height: ${resolvedHeight};\n          border: 3px solid transparent;\n          border-top-color: ${color};\n          border-bottom-color: ${color};\n          border-radius: 50%;\n          animation: ${spin} calc(${duration} * 2.5) linear infinite;\n\n          &::before {\n            content: \"\";\n            display: block;\n            margin: auto;\n            width: calc(${resolvedWidth} * 0.75 / 3.5);\n            height: calc(${resolvedHeight} * 0.75 / 3.5);\n            border: 3px solid ${color};\n            border-radius: 50%;\n            animation: ${pulse} ${duration} alternate ease-in-out infinite;\n          }\n        ` + ` ${className}`\n      }\n    ></div>\n  );\n};\n\nexport default TwinSpin;\n"],"names":["grow","keyframes","leftSwing","rightSwing","rotate","dash","spin","fade","fill","flip","wave","spinStretch","pulse","className","color","width","height","style","duration","others","resolvedWidth","resolvedHeight","React","css","crossOrigin","viewBox","cx","cy","r"],"mappings":"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"}